
print_ws = ui_workshop.print_ws
SetTip = ui_workshop.SetTip
has_parts = arti_outfits.has_parts
average_cond = arti_outfits.average_cond

ReplacePart = ui_workshop.UIWorkshopRepair.ReplacePart

function ui_workshop.UIWorkshopRepair:ReplacePart()
	local obj_part = self.CC["parts"]:GetCell_Selected(true)
	local obj = self.CC["inventory"]:GetCell_Selected(true)
	if not (obj_part and self.selected_btn) then
		return
	end
	if not has_parts(obj) then
		ReplacePart(self)
		return
	end	
	self.itm_selected[self.selected_btn]:InitTexture("ui_button_inv_t")
		
	print_ws("- UIWorkshopRepair:ReplacePart() | picked replacement part (%s) [%s] - condition: %s", obj_part:id(), obj_part:section(), obj_part:condition())
	
	-- Save the condition of selected part
	local new_part_con = math.ceil(obj_part:condition()*100)
	
	if self.parts[self.selected_btn].con > new_part_con then return end

	self.new_con[self.selected_btn] = {}
	self.new_con[self.selected_btn].id = obj_part:id()
	self.new_con[self.selected_btn].con = new_part_con
	
	-- Calculate individual condition and update text
	self.btn_repair:Enable(true)
	local tot_con = 0
	local cnt = 0
	local active = 0
	local total_cond = {}
	for i=1,6 do
		if self.parts[i] and self.parts[i].sec and (self.parts[i].sec ~= "na") then
			local t = self.parts[i].con
			if self.new_con[i] then
				t = self.new_con[i].con
				active = active + 1
			end
			local clr = utils_xml.get_color_con(t)
			self.itm_con[i]:SetText(clr .. t .. "%")
			tot_con = tot_con + t --AdjustCon(self.parts[i].sec, t, #self.parts, IsOutfit(self.object))
			cnt = cnt + 1
			total_cond[self.parts[i].sec] = t
		end
	end

	local id = obj:id()
	local outfit = level.object_by_id(id)
	-- Calculate total condition and update text
	-- for outfits, display new max condition
	if arti_outfits and has_parts(outfit) then
		tot_con = clamp(math.ceil(outfit:condition() * 100), 0, 100)
		new_max_cond = average_cond(total_cond)
		self.itm_con_r:SetText(tot_con .. "/".. new_max_cond)
	else
		tot_con = clamp(math.ceil(tot_con/cnt),0,100)
		self.itm_con_r:SetText(tot_con .. "%")
	end
	-- Update remaining toolkit count
	-- self:UpdateToolkits(active)
	
	-- Hide part inventory
	self.CC["parts"]:Reset()
	
	utils_obj.play_sound("interface\\items\\inv_items_cloth_" .. tostring(math.random(2,3)))
	
	SetTip("repair_tip_4", nil, nil, nil, true, self.info_text)
	
	-- Reset
	self.selected_btn = nil
	self.highlight_btn = nil
end


WorkshopRepair = ui_workshop.UIWorkshopRepair.Repair
function ui_workshop.UIWorkshopRepair:Repair()
	local obj = self.CC["inventory"]:GetCell_Selected(true)
	if (not obj) then
		return
	end
	
	if not has_parts(obj) then
		WorkshopRepair(self)
		return
	end

	local sim = alife()
	local tot_con = 0
	local cnt = 0
	if is_not_empty(self.new_con) then
		for i=1,6 do
			if self.parts[i] and self.parts[i].sec and (self.parts[i].sec ~= "na") then
				if self.new_con[i] and self.new_con[i].id then
					self.parts[i].con = self.new_con[i].con
					print_ws("- UIWorkshopRepair:Repair() | replaced part spotted | part: %s - condition: %s - order: %s - id: %s", self.parts[i].sec, self.new_con[i].con, i, self.new_con[i].id)
					
					-- Release replacement parts
					alife_release_id(self.new_con[i].id)
				end
				
				tot_con = tot_con + self.parts[i].con --AdjustCon(self.parts[i].sec, self.parts[i].con, #self.parts, IsOutfit(self.object))
				cnt = cnt + 1
				print_ws("/ UIWorkshopRepair:Repair() | total condition calculation | part: %s - condition: %s - order: %s - total sum: %s", self.parts[i].sec, self.parts[i].con, i, tot_con)
			end
		end
	else
		print_ws("! UIWorkshopRepair:Repair() | no new parts have been replaced")
		return
	end
	
	-- Discharge tools
	for i=1,#self.toolkit_pick do
		local obj_tool = level.object_by_id(self.toolkit_pick[i])
		if obj_tool then
			utils_item.discharge(obj_tool)
			print_ws("/ UIWorkshopRepair:Repair() | discharged toolkit (%s)", self.toolkit_pick[i])
		else
			printe("!ERROR UIWorkshopRepair:Repair() | can't discharge toolkit with id (%s). Object not found!", self.toolkit_pick[i])
		end
	end
	
	-- Apply condition changes
	local id = obj:id()
	local sec = obj:section()
	sec = ini_sys:r_string_ex(sec,"parent_section") or sec -- for weapons with scopes
	
	local final_con = (cnt > 0) and (clamp(math.ceil(tot_con/cnt),1,100)/100)
	local weapon = level.object_by_id(id)

	if weapon and final_con and (final_con >= 0) and (final_con <= 1) then
		-- arti_outfits - do not set outfit condition, only max condition
		if not has_parts(weapon) then
			weapon:set_condition(final_con) 
		end
		print_ws("- UIWorkshopRepair:Repair() | object with id (%s) is set to a new condition: %s", id, final_con)
	else
		printe("! UIWorkshopRepair:Repair() | object with id (%s) is either not found. Or didn't register new condition (%s)!", id, final_con)
	end
	
	local result_part_tbl = {}
	result_part_tbl[sec] = math.ceil(tot_con/cnt)
	for i=1,#self.parts do
		result_part_tbl[self.parts[i].sec] = self.parts[i].con
	end
	item_parts.set_parts_con(id, result_part_tbl)
	arti_outfits.check_reset_parts(id)
	for k,v in pairs(result_part_tbl) do
		print_ws("~ UIWorkshopRepair:Repair() | item's new part table [%s] = %s",k,v)
	end
	
	-- Effect
	actor_effects.play_item_fx("craft_dummy")
	db.actor:move_to_ruck(weapon)
	self:Close()
end