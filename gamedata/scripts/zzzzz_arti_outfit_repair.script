part_compatible = arti_outfits.part_compatible
print_dbg = arti_outfits.print_dbg
get_config = arti_outfits_mcm.get_config

math_floor = math.floor
has_parts = arti_outfits.has_parts
rank_component = arti_outfits.rank_component
get_max_condition = arti_outfits.get_max_condition
get_projected_max = arti_outfits.get_projected_max
repair_parts = arti_outfits.repair_parts
cap_condition = arti_outfits.cap_condition
average_cond = arti_outfits.average_cond
is_part = arti_outfits.is_part
tier_outfit = arti_outfits.tier_outfit
ini_restore = arti_outfits.ini_restore
ini_custom_repair = arti_outfits.ini_custom_repair


function generate_readout(old, new)
	str = ""
	for k,v in pairs(old) do
		diff = new[k] - v
		if is_part(k) then
			str = str .. ui_item.get_sec_name(k) .. ": \\n"
			str = str .. math_floor(v) .. " + " .. math_floor(diff) .. " = " .. math_floor(new[k]) .. " \\n" 
		end
	end
	return str
end

function item_repair.UIRepair:InitRepairInfo()
	self.info = {}
	self.info.xml = CScriptXmlInit()
	self.info.xml:ParseFile("ui_repair_info.xml")
	self.info.background = self.info.xml:InitStatic("background", self)
    self.info.text = self.info.xml:InitTextWnd("repair:text_info" , self)
	self.info.text:SetText("")
end

-- reject conflicts, return to monke
RepairInitInv = item_repair.UIRepair.InitInventory
function item_repair.UIRepair:InitInventory(n)
	local inv = {}
	local size_t = 0

    local not_outfit = true
    for k,v in pairs(self.repair_only) do
        if string.find(k, "outfit_") then
            not_outfit = false
        end
    end

    if not_outfit then
		if self.info then
			self.info.background:Show(false)
			self.info.text:Show(false)
		end
        RepairInitInv(self, n)
        return
    end

	-- Compatible weapons list to repair
	if n == 1 then
		db.actor:iterate_inventory( function(owner, obj)
			local sec = obj:section()
			local main_section = ini_sys:r_string_ex(sec,"repair_type") or sec
			if (self.repair_only and self.repair_only[main_section]) then
				local con = math.ceil(obj:condition() * 100)
				if (con and con >= (self.min_condition * 100) and con <= self.max_condition * 100) then
					size_t = size_t + 1
					inv[size_t] = obj
				end
			end
		end)
		
		self.CC[1]:Reinit(inv)
		if get_config("ui") then
			if not self.info then
				self:InitRepairInfo()
			end
			self.info.background:Show(true)
			self.info.text:Show(true)
			self.info.text:SetText("")
		end

	-- Compatible part list to use
	elseif n == 2 then
		local obj_s = self.CC[1]:GetCell_Selected(true)
		if (not obj_s) then
			return
		end
		
		local inf = {}
		local ItemListSec_2 = {} -- to show only one copy of bonus items
		db.actor:iterate_inventory( function(owner, obj)
			local sec = obj:section()
			if (not ItemListSec_2[sec]) and (obj) and (obj:id() ~= obj_s:id()) and (obj:id() ~= self.obj:id()) then
				ItemListSec_2[sec] = true
				
				if (self.parts_match and sec == obj_s:section()) then
					local part_bonus = obj:condition()
					part_bonus = (game_achievements.has_achievement("mechanized_warfare")) and (part_bonus + 0.02) or part_bonus
					part_bonus = clamp(math_floor(part_bonus*100)*self.parts_multi , 0 , 100)
				
					size_t = size_t + 1
					inv[size_t] = obj
					inf[size_t] = part_bonus
				-- arti_outfits - use any outfit part
				elseif ((self.parts_sections and self.parts_sections[sec]) or (part_compatible(sec, self.section))) then
					local part_bonus = ini_sys:r_float_ex(sec,"repair_part_bonus") or self.part_bonus
                    local rank = rank_component(sec)
                    if (rank == 3 or rank == 4) and not is_part_match then 
                        part_bonus = 0.01 * (math_floor(obj:condition() / 0.2))
                    end
					part_bonus = (game_achievements.has_achievement("mechanized_warfare")) and (part_bonus + 0.02) or part_bonus
					part_bonus = clamp(math_floor(part_bonus*100)*self.parts_multi , 0 , 100)

					size_t = size_t + 1
					inv[size_t] = obj
					inf[size_t] = part_bonus
				end
			end
		end)
		
		self.CC[2]:Reinit(inv,inf)
		
		local clr_b = utils_xml.get_color("pda_blue",true)
		local fnt = GetFontSmall()
		for idx,ci in pairs(self.CC[2].cell) do
			if ci:IsShown() then
				local con100 = ci.flags.info
				local con = ci.flags.info / 100
				ci:Add_CustomText( ("+"..con100), nil, nil, clr_b, fnt)
			end
		end
	end
end

RepairOnItemSelect = item_repair.UIRepair.OnItemSelect
function item_repair.UIRepair:OnItemSelect(n)
	local obj_1 = self.CC[1]:GetCell_Selected(true) -- item to be fixed
	local obj_n = self.CC[n]:GetCell_Selected(true) -- support item
	if not (obj_1 and obj_n) then
		return
	end

    if not has_parts(obj_1) then 
        RepairOnItemSelect(self, n)
		return
    end

	local sec = obj_n:section()
	local id = obj_n:id()

	local cond_1 = obj_1:condition()
	local sec_r = self.obj:section()
	local item_tier = a_repair_override.get_prop(sec_r, "repair_tier", 2)
	if item_tier == 0 then item_tier = 5 end
	local outfit_tier = tier_outfit(obj_1:section())
	local repair_add = a_repair_override.get_prop(sec_r,"repair_add_condition", 2)
	self.add_condition = outfit_tier > item_tier and repair_add/2 or repair_add
	print_dbg("Repair item tier %s, outfit tier %s. Add condition %s", item_tier, outfit_tier, self.add_condition)
	
	local con = 0
	if n == 2 then
		local is_part_match = (self.parts_match and sec == obj_1:section())
		con = is_part_match and obj_n:condition() or ini_sys:r_float_ex(sec,"repair_part_bonus") or self.part_bonus
        local rank = rank_component(sec)
        if (rank == 3 or rank == 4) and not is_part_match then 
            con = 0.01 * (math_floor(obj_n:condition() / 0.2))
        end
		con = (game_achievements.has_achievement("mechanized_warfare")) and (con + 0.02) or con
		con = clamp(math_floor(con*100)*self.parts_multi , 0 , 100)
	end
	
	-- Text (Name)
	local name = ui_item.get_sec_name(sec)
	self.text_item[n]:SetText(name)
	
	-- Text (Condition)
	self.con_val[1] = math.ceil((obj_1:condition())*100) -- old condition
	self.con_val[2] = ((n == 2) and con) or 0 -- support bonus
	self.con_val[3] = math_floor((self.add_condition)*100) -- repair add
	self.con_val[4] = clamp(self.con_val[1] + self.con_val[2] + self.con_val[3], 0, 100) -- total condition (cap this)
    local oldMaxCond = get_max_condition(obj_1)
	local diff = get_projected_max(obj_1, self.section, obj_n)
	local maxCond = average_cond(diff.new)
    print_dbg("Projected max is %s", maxCond)
	if IsItem("part",nil,obj_1) then
		self.con_val[4] = utils_item.get_cond_static(self.con_val[4])
	end
	
	self.con_txt[1]:SetText(utils_xml.get_color_con(self.con_val[1]) .. game.translate_string("st_ui_oldcon") .. ": " .. self.con_val[1] .. "/" ..oldMaxCond )
	self.con_txt[2]:SetText(self.clr_b .. game.translate_string("st_ui_bonus") .. ": +" .. self.con_val[2] .. "%")
	self.con_txt_base:SetText(game.translate_string("st_ui_repair") .. ": " .. self.con_val[3] .. "%")
    local color_con = self.con_val[4] > maxCond and utils_xml.get_color_con(1) or utils_xml.get_color_con(self.con_val[4])
	self.con_txt_new:SetText(color_con .. game.translate_string("st_ui_repair_new") .. ": " .. self.con_val[4] .. "/"..maxCond)
	
	-- Icon
	self.cell_item[n]:Set(obj_n)

	-- Reset supportive item when you choose main item
	if (n == 1) and self.use_parts then
		self.cell_item[2]:Reset()
		self.text_item[2]:SetText("")
	end
	if get_config("ui") then
		self.info.text:SetText(generate_readout(diff.old, diff.new))
		-- repair_ui.set_text()
	end
	self.btn_repair:Enable(true)
end

OnRepair = item_repair.UIRepair.OnRepair

function item_repair.UIRepair:OnRepair()	
	-- if get_config("ui") and not zz_item_repair_keep_crafting_window_open then -- Compatibility with Keep Crafting Window Open
	-- 	repair_ui.close()
	-- end
    OnRepair(self)
	local obj_1 = self.CC[1]:GetCell_Selected(true)
	local obj_2 = self.CC[2]:GetCell_Selected(true)
    if has_parts(obj_1) then
        repair_parts(obj_1, self.obj:section(), obj_2)
        cap_condition(obj_1)
    end
end


PrepStats = utils_ui.prepare_stats_table
function utils_ui.prepare_stats_table()
    PrepStats()
    if not utils_ui.stats_table.outfit.max_condition then
		printf("Add stats for max cond")
        utils_ui.stats_table.outfit["max_condition"] = { 
            index=0, typ= "float",   name= "ui_inv_max_condition", icon_p= "ui_am_propery_01",   icon_n= "", track= false, magnitude= 1, unit= "%", compare= false, sign= false, show_always= false , value_functor= {"arti_outfits","ui_max_condition"}}
    end
end
